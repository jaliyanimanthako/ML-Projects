# Import necessary modules
import PIL
from PIL import Image, ImageEnhance, ImageDraw, ImageFont
import numpy as np

# Create an empty list to store generated images
pics = []

# Loop over intensity levels (0.1, 0.5, 0.9) for each color channel (Red, Green, Blue)
for i in (0.1, 0.5, 0.9):
    # Open the image and convert it to RGB mode
    image = Image.open("readonly/msi_recruitment.gif")
    image = image.convert('RGB')

    # Split the image into its RGB components
    r, g, b = image.split()

    # Adjust the intensity of the red channel
    r = r.point(lambda x: x * i)

    # Merge the channels back into a single image
    OUT = Image.merge('RGB', (r, g, b))

    # Resize the image to half its original size
    OUT = OUT.resize((int(OUT.width / 2), (int(OUT.height / 2))))

    # Create a black rectangle with text indicating the channel and intensity level
    recti = Image.new('RGB', (OUT.width, 30), color=(0, 0, 0))
    draw_v = ImageDraw.Draw(recti)
    fnti = ImageFont.truetype('readonly/fanwood-webfont.ttf', 20)
    draw_v.text((10, 10), 'channel 0 intensity {}'.format(i), font=fnti, fill=OUT.getpixel((0, 50)))

    # Paste the rectangle and the modified image onto a new sheet
    sheet = PIL.Image.new(OUT.mode, (OUT.width, OUT.height + recti.height))
    sheet.paste(recti, (0, OUT.height))
    sheet.paste(OUT, (0, 0))

    # Append the sheet to the pics list
    pics.append(sheet)

# Repeat the process for the Green channel
for i in (0.1, 0.5, 0.9):
    image = Image.open("readonly/msi_recruitment.gif")
    image = image.convert('RGB')
    r, g, b = image.split()
    g = g.point(lambda x: x * i)
    OUT = Image.merge('RGB', (r, g, b))
    OUT = OUT.resize((int(OUT.width / 2), (int(OUT.height / 2))))
    recti = Image.new('RGB', (OUT.width, 30), color=(0, 0, 0))
    draw_v = ImageDraw.Draw(recti)
    fnti = ImageFont.truetype('readonly/fanwood-webfont.ttf', 20)
    draw_v.text((10, 10), 'channel 1 intensity {}'.format(i), font=fnti, fill=OUT.getpixel((0, 50)))
    sheet = PIL.Image.new(OUT.mode, (OUT.width, OUT.height + recti.height))
    sheet.paste(recti, (0, OUT.height))
    sheet.paste(OUT, (0, 0))
    pics.append(sheet)

# Repeat the process for the Blue channel
for i in (0.1, 0.5, 0.9):
    image = Image.open("readonly/msi_recruitment.gif")
    image = image.convert('RGB')
    r, g, b = image.split()
    b = b.point(lambda x: x * i)
    OUT = Image.merge('RGB', (r, g, b))
    OUT = OUT.resize((int(OUT.width / 2), (int(OUT.height / 2))))
    recti = Image.new('RGB', (OUT.width, 30), color=(0, 0, 0))
    draw_v = ImageDraw.Draw(recti)
    fnti = ImageFont.truetype('readonly/fanwood-webfont.ttf', 20)
    draw_v.text((10, 10), 'channel 2 intensity {}'.format(i), font=fnti, fill=OUT.getpixel((0, 50)))
    sheet = PIL.Image.new(OUT.mode, (OUT.width, OUT.height + recti.height))
    sheet.paste(recti, (0, OUT.height))
    sheet.paste(OUT, (0, 0))
    pics.append(sheet)

for i in (0.1, 0.5, 0.9):
    image = Image.open("readonly/msi_recruitment.gif")
    image = image.convert('RGB')
    r, g, b = image.split()
    b = b.point(lambda x: x * i)
    OUT = Image.merge('RGB', (r, g, b))
    OUT = OUT.resize((int(OUT.width / 2), (int(OUT.height / 2))))
    recti = Image.new('RGB', (OUT.width, 30), color = (0, 0, 0))
    draw_v = ImageDraw.Draw(recti)
    fnti = ImageFont.truetype('readonly/fanwood-webfont.ttf', 20)
    draw_v.text((10, 10), 'channel 2 intensity {}'.format(i), font = fnti, fill = OUT.getpixel((0, 50)))
    sheet = PIL.Image.new(OUT.mode, (OUT.width, OUT.height + recti.height))
    sheet.paste(recti, (0, OUT.height))
    sheet.paste(OUT, (0, 0))
    pics.append(sheet)



# Get the dimensions of the first image in the list
first_image = pics[0]

# Create the contact sheet
contact_sheet = PIL.Image.new(first_image.mode, (first_image.width * 3, first_image.height * 3))
x = 0
y = 0

# Loop over each image in pics
for image in pics:
    contact_sheet.paste(image, (x, y))
    if x + first_image.width == contact_sheet.width:
        x = 0
        y = y + first_image.height
    else:
        x = x + first_image.width
